
sevensegment_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000858  08000858  00010858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000864  08000864  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000864  08000864  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000864  08000864  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000864  08000864  00010864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000868  08000868  00010868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800086c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001134  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004d1  00000000  00000000  00021168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00021640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  00021838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000108b  00000000  00000000  000219e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019e9  00000000  00000000  00022a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb83f  00000000  00000000  0002445c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000dfc9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000628  00000000  00000000  000dfcec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000840 	.word	0x08000840

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000840 	.word	0x08000840

080001c8 <delay>:
#define D_enable gpioc_odr |= 1<<7; // C7 connected D so D Enable
#define E_enable gpioc_odr |= 1<<4; // C4 connected E so E Enable
#define F_enable gpiob_odr |= 1<<10; // B10 connected F so F Enable
#define G_enable gpiob_odr |= 1<<6; // B6 connected G so G Enable

void delay(){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
    int delay=0xFDEAF;
 80001ce:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <delay+0x30>)
 80001d0:	607b      	str	r3, [r7, #4]
    while(delay--){
 80001d2:	e005      	b.n	80001e0 <delay+0x18>
        if(gpioa_idr & 1<<0){
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <delay+0x34>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f003 0301 	and.w	r3, r3, #1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d105      	bne.n	80001ec <delay+0x24>
    while(delay--){
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	1e5a      	subs	r2, r3, #1
 80001e4:	607a      	str	r2, [r7, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d1f4      	bne.n	80001d4 <delay+0xc>
 80001ea:	e000      	b.n	80001ee <delay+0x26>
                return;
 80001ec:	bf00      	nop
        }
    }
}
 80001ee:	370c      	adds	r7, #12
 80001f0:	46bd      	mov	sp, r7
 80001f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f6:	4770      	bx	lr
 80001f8:	000fdeaf 	.word	0x000fdeaf
 80001fc:	40020010 	.word	0x40020010

08000200 <delay2>:

void delay2(){
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
    int delay=0xFDEAF;
 8000206:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <delay2+0x30>)
 8000208:	607b      	str	r3, [r7, #4]
    if(gpioa_idr & 1<<0)
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <delay2+0x34>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f003 0301 	and.w	r3, r3, #1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d005      	beq.n	8000222 <delay2+0x22>
    	while(delay--);
 8000216:	bf00      	nop
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	1e5a      	subs	r2, r3, #1
 800021c:	607a      	str	r2, [r7, #4]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d1fa      	bne.n	8000218 <delay2+0x18>
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	000fdeaf 	.word	0x000fdeaf
 8000234:	40020010 	.word	0x40020010

08000238 <init>:

void init (){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
    AHB1ENR;
 800023c:	4b13      	ldr	r3, [pc, #76]	; (800028c <init+0x54>)
 800023e:	220f      	movs	r2, #15
 8000240:	601a      	str	r2, [r3, #0]
    b_moderset;
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <init+0x58>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a12      	ldr	r2, [pc, #72]	; (8000290 <init+0x58>)
 8000248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800024c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000250:	6013      	str	r3, [r2, #0]
    c_moderset;
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <init+0x5c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a0f      	ldr	r2, [pc, #60]	; (8000294 <init+0x5c>)
 8000258:	f443 4382 	orr.w	r3, r3, #16640	; 0x4100
 800025c:	6013      	str	r3, [r2, #0]
    d_moderset;
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <init+0x60>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <init+0x60>)
 8000264:	f043 53a0 	orr.w	r3, r3, #335544320	; 0x14000000
 8000268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800026c:	6013      	str	r3, [r2, #0]
    b_odr_reset;
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <init+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
    c_odr_reset;
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <init+0x68>)
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
    d_odr_reset;
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <init+0x6c>)
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40023830 	.word	0x40023830
 8000290:	40020400 	.word	0x40020400
 8000294:	40020800 	.word	0x40020800
 8000298:	40020c00 	.word	0x40020c00
 800029c:	40020414 	.word	0x40020414
 80002a0:	40020814 	.word	0x40020814
 80002a4:	40020c14 	.word	0x40020c14

080002a8 <reset>:

void reset(){
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
    b_odr_reset;
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <reset+0x20>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
    c_odr_reset;
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <reset+0x24>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
    d_odr_reset;
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <reset+0x28>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40020414 	.word	0x40020414
 80002cc:	40020814 	.word	0x40020814
 80002d0:	40020c14 	.word	0x40020c14

080002d4 <sevensegment>:

void sevensegment(int data){
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
    switch (data)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b09      	cmp	r3, #9
 80002e0:	f200 814f 	bhi.w	8000582 <sevensegment+0x2ae>
 80002e4:	a201      	add	r2, pc, #4	; (adr r2, 80002ec <sevensegment+0x18>)
 80002e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ea:	bf00      	nop
 80002ec:	08000315 	.word	0x08000315
 80002f0:	0800035f 	.word	0x0800035f
 80002f4:	08000379 	.word	0x08000379
 80002f8:	080003b7 	.word	0x080003b7
 80002fc:	080003f5 	.word	0x080003f5
 8000300:	08000427 	.word	0x08000427
 8000304:	08000465 	.word	0x08000465
 8000308:	080004af 	.word	0x080004af
 800030c:	080004d5 	.word	0x080004d5
 8000310:	08000539 	.word	0x08000539
    {
    case 0:
        A_enable;
 8000314:	4b85      	ldr	r3, [pc, #532]	; (800052c <sevensegment+0x258>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a84      	ldr	r2, [pc, #528]	; (800052c <sevensegment+0x258>)
 800031a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031e:	6013      	str	r3, [r2, #0]
        B_enable;
 8000320:	4b82      	ldr	r3, [pc, #520]	; (800052c <sevensegment+0x258>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a81      	ldr	r2, [pc, #516]	; (800052c <sevensegment+0x258>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6013      	str	r3, [r2, #0]
        C_enable;
 800032c:	4b7f      	ldr	r3, [pc, #508]	; (800052c <sevensegment+0x258>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a7e      	ldr	r2, [pc, #504]	; (800052c <sevensegment+0x258>)
 8000332:	f043 0310 	orr.w	r3, r3, #16
 8000336:	6013      	str	r3, [r2, #0]
        D_enable;
 8000338:	4b7d      	ldr	r3, [pc, #500]	; (8000530 <sevensegment+0x25c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a7c      	ldr	r2, [pc, #496]	; (8000530 <sevensegment+0x25c>)
 800033e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000342:	6013      	str	r3, [r2, #0]
        E_enable;
 8000344:	4b7a      	ldr	r3, [pc, #488]	; (8000530 <sevensegment+0x25c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a79      	ldr	r2, [pc, #484]	; (8000530 <sevensegment+0x25c>)
 800034a:	f043 0310 	orr.w	r3, r3, #16
 800034e:	6013      	str	r3, [r2, #0]
        F_enable;
 8000350:	4b78      	ldr	r3, [pc, #480]	; (8000534 <sevensegment+0x260>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a77      	ldr	r2, [pc, #476]	; (8000534 <sevensegment+0x260>)
 8000356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800035a:	6013      	str	r3, [r2, #0]
        break;
 800035c:	e112      	b.n	8000584 <sevensegment+0x2b0>
    case 1:
        B_enable;
 800035e:	4b73      	ldr	r3, [pc, #460]	; (800052c <sevensegment+0x258>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a72      	ldr	r2, [pc, #456]	; (800052c <sevensegment+0x258>)
 8000364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000368:	6013      	str	r3, [r2, #0]
        C_enable;
 800036a:	4b70      	ldr	r3, [pc, #448]	; (800052c <sevensegment+0x258>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a6f      	ldr	r2, [pc, #444]	; (800052c <sevensegment+0x258>)
 8000370:	f043 0310 	orr.w	r3, r3, #16
 8000374:	6013      	str	r3, [r2, #0]
        break;
 8000376:	e105      	b.n	8000584 <sevensegment+0x2b0>
    case 2:
        A_enable;
 8000378:	4b6c      	ldr	r3, [pc, #432]	; (800052c <sevensegment+0x258>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a6b      	ldr	r2, [pc, #428]	; (800052c <sevensegment+0x258>)
 800037e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000382:	6013      	str	r3, [r2, #0]
        B_enable;
 8000384:	4b69      	ldr	r3, [pc, #420]	; (800052c <sevensegment+0x258>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a68      	ldr	r2, [pc, #416]	; (800052c <sevensegment+0x258>)
 800038a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800038e:	6013      	str	r3, [r2, #0]
        G_enable;
 8000390:	4b68      	ldr	r3, [pc, #416]	; (8000534 <sevensegment+0x260>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a67      	ldr	r2, [pc, #412]	; (8000534 <sevensegment+0x260>)
 8000396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800039a:	6013      	str	r3, [r2, #0]
        E_enable;
 800039c:	4b64      	ldr	r3, [pc, #400]	; (8000530 <sevensegment+0x25c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a63      	ldr	r2, [pc, #396]	; (8000530 <sevensegment+0x25c>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6013      	str	r3, [r2, #0]
        D_enable;
 80003a8:	4b61      	ldr	r3, [pc, #388]	; (8000530 <sevensegment+0x25c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a60      	ldr	r2, [pc, #384]	; (8000530 <sevensegment+0x25c>)
 80003ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b2:	6013      	str	r3, [r2, #0]
        break;
 80003b4:	e0e6      	b.n	8000584 <sevensegment+0x2b0>
    case 3:
        A_enable;
 80003b6:	4b5d      	ldr	r3, [pc, #372]	; (800052c <sevensegment+0x258>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a5c      	ldr	r2, [pc, #368]	; (800052c <sevensegment+0x258>)
 80003bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003c0:	6013      	str	r3, [r2, #0]
        B_enable;
 80003c2:	4b5a      	ldr	r3, [pc, #360]	; (800052c <sevensegment+0x258>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a59      	ldr	r2, [pc, #356]	; (800052c <sevensegment+0x258>)
 80003c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003cc:	6013      	str	r3, [r2, #0]
        G_enable;
 80003ce:	4b59      	ldr	r3, [pc, #356]	; (8000534 <sevensegment+0x260>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a58      	ldr	r2, [pc, #352]	; (8000534 <sevensegment+0x260>)
 80003d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d8:	6013      	str	r3, [r2, #0]
        C_enable;
 80003da:	4b54      	ldr	r3, [pc, #336]	; (800052c <sevensegment+0x258>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a53      	ldr	r2, [pc, #332]	; (800052c <sevensegment+0x258>)
 80003e0:	f043 0310 	orr.w	r3, r3, #16
 80003e4:	6013      	str	r3, [r2, #0]
        D_enable;
 80003e6:	4b52      	ldr	r3, [pc, #328]	; (8000530 <sevensegment+0x25c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a51      	ldr	r2, [pc, #324]	; (8000530 <sevensegment+0x25c>)
 80003ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f0:	6013      	str	r3, [r2, #0]
        break;
 80003f2:	e0c7      	b.n	8000584 <sevensegment+0x2b0>
    case 4:
        F_enable;
 80003f4:	4b4f      	ldr	r3, [pc, #316]	; (8000534 <sevensegment+0x260>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a4e      	ldr	r2, [pc, #312]	; (8000534 <sevensegment+0x260>)
 80003fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003fe:	6013      	str	r3, [r2, #0]
        G_enable;
 8000400:	4b4c      	ldr	r3, [pc, #304]	; (8000534 <sevensegment+0x260>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a4b      	ldr	r2, [pc, #300]	; (8000534 <sevensegment+0x260>)
 8000406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800040a:	6013      	str	r3, [r2, #0]
        B_enable;
 800040c:	4b47      	ldr	r3, [pc, #284]	; (800052c <sevensegment+0x258>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a46      	ldr	r2, [pc, #280]	; (800052c <sevensegment+0x258>)
 8000412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000416:	6013      	str	r3, [r2, #0]
        C_enable;
 8000418:	4b44      	ldr	r3, [pc, #272]	; (800052c <sevensegment+0x258>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a43      	ldr	r2, [pc, #268]	; (800052c <sevensegment+0x258>)
 800041e:	f043 0310 	orr.w	r3, r3, #16
 8000422:	6013      	str	r3, [r2, #0]
        break;
 8000424:	e0ae      	b.n	8000584 <sevensegment+0x2b0>
    case 5:
        A_enable;
 8000426:	4b41      	ldr	r3, [pc, #260]	; (800052c <sevensegment+0x258>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a40      	ldr	r2, [pc, #256]	; (800052c <sevensegment+0x258>)
 800042c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000430:	6013      	str	r3, [r2, #0]
        F_enable;
 8000432:	4b40      	ldr	r3, [pc, #256]	; (8000534 <sevensegment+0x260>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a3f      	ldr	r2, [pc, #252]	; (8000534 <sevensegment+0x260>)
 8000438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800043c:	6013      	str	r3, [r2, #0]
        G_enable;
 800043e:	4b3d      	ldr	r3, [pc, #244]	; (8000534 <sevensegment+0x260>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a3c      	ldr	r2, [pc, #240]	; (8000534 <sevensegment+0x260>)
 8000444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000448:	6013      	str	r3, [r2, #0]
        C_enable;
 800044a:	4b38      	ldr	r3, [pc, #224]	; (800052c <sevensegment+0x258>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a37      	ldr	r2, [pc, #220]	; (800052c <sevensegment+0x258>)
 8000450:	f043 0310 	orr.w	r3, r3, #16
 8000454:	6013      	str	r3, [r2, #0]
        D_enable;
 8000456:	4b36      	ldr	r3, [pc, #216]	; (8000530 <sevensegment+0x25c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a35      	ldr	r2, [pc, #212]	; (8000530 <sevensegment+0x25c>)
 800045c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000460:	6013      	str	r3, [r2, #0]
        break;
 8000462:	e08f      	b.n	8000584 <sevensegment+0x2b0>
    case 6:
        A_enable;
 8000464:	4b31      	ldr	r3, [pc, #196]	; (800052c <sevensegment+0x258>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a30      	ldr	r2, [pc, #192]	; (800052c <sevensegment+0x258>)
 800046a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800046e:	6013      	str	r3, [r2, #0]
        F_enable;
 8000470:	4b30      	ldr	r3, [pc, #192]	; (8000534 <sevensegment+0x260>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a2f      	ldr	r2, [pc, #188]	; (8000534 <sevensegment+0x260>)
 8000476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800047a:	6013      	str	r3, [r2, #0]
        G_enable;
 800047c:	4b2d      	ldr	r3, [pc, #180]	; (8000534 <sevensegment+0x260>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a2c      	ldr	r2, [pc, #176]	; (8000534 <sevensegment+0x260>)
 8000482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000486:	6013      	str	r3, [r2, #0]
        C_enable;
 8000488:	4b28      	ldr	r3, [pc, #160]	; (800052c <sevensegment+0x258>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a27      	ldr	r2, [pc, #156]	; (800052c <sevensegment+0x258>)
 800048e:	f043 0310 	orr.w	r3, r3, #16
 8000492:	6013      	str	r3, [r2, #0]
        D_enable;
 8000494:	4b26      	ldr	r3, [pc, #152]	; (8000530 <sevensegment+0x25c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a25      	ldr	r2, [pc, #148]	; (8000530 <sevensegment+0x25c>)
 800049a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800049e:	6013      	str	r3, [r2, #0]
        E_enable;
 80004a0:	4b23      	ldr	r3, [pc, #140]	; (8000530 <sevensegment+0x25c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a22      	ldr	r2, [pc, #136]	; (8000530 <sevensegment+0x25c>)
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	6013      	str	r3, [r2, #0]
        break;
 80004ac:	e06a      	b.n	8000584 <sevensegment+0x2b0>
    case 7:
        A_enable;
 80004ae:	4b1f      	ldr	r3, [pc, #124]	; (800052c <sevensegment+0x258>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a1e      	ldr	r2, [pc, #120]	; (800052c <sevensegment+0x258>)
 80004b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004b8:	6013      	str	r3, [r2, #0]
        B_enable;
 80004ba:	4b1c      	ldr	r3, [pc, #112]	; (800052c <sevensegment+0x258>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a1b      	ldr	r2, [pc, #108]	; (800052c <sevensegment+0x258>)
 80004c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c4:	6013      	str	r3, [r2, #0]
        C_enable;
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <sevensegment+0x258>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a18      	ldr	r2, [pc, #96]	; (800052c <sevensegment+0x258>)
 80004cc:	f043 0310 	orr.w	r3, r3, #16
 80004d0:	6013      	str	r3, [r2, #0]
        break;
 80004d2:	e057      	b.n	8000584 <sevensegment+0x2b0>
    case 8:
        A_enable;
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <sevensegment+0x258>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a14      	ldr	r2, [pc, #80]	; (800052c <sevensegment+0x258>)
 80004da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004de:	6013      	str	r3, [r2, #0]
        B_enable;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <sevensegment+0x258>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a11      	ldr	r2, [pc, #68]	; (800052c <sevensegment+0x258>)
 80004e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ea:	6013      	str	r3, [r2, #0]
        C_enable;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <sevensegment+0x258>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <sevensegment+0x258>)
 80004f2:	f043 0310 	orr.w	r3, r3, #16
 80004f6:	6013      	str	r3, [r2, #0]
        D_enable;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <sevensegment+0x25c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <sevensegment+0x25c>)
 80004fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000502:	6013      	str	r3, [r2, #0]
        E_enable;
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <sevensegment+0x25c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <sevensegment+0x25c>)
 800050a:	f043 0310 	orr.w	r3, r3, #16
 800050e:	6013      	str	r3, [r2, #0]
        F_enable;
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <sevensegment+0x260>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <sevensegment+0x260>)
 8000516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051a:	6013      	str	r3, [r2, #0]
        G_enable;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <sevensegment+0x260>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <sevensegment+0x260>)
 8000522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000526:	6013      	str	r3, [r2, #0]
        break;
 8000528:	e02c      	b.n	8000584 <sevensegment+0x2b0>
 800052a:	bf00      	nop
 800052c:	40020c14 	.word	0x40020c14
 8000530:	40020814 	.word	0x40020814
 8000534:	40020414 	.word	0x40020414
    case 9:
        A_enable;
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <sevensegment+0x2bc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <sevensegment+0x2bc>)
 800053e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000542:	6013      	str	r3, [r2, #0]
        B_enable;
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <sevensegment+0x2bc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a11      	ldr	r2, [pc, #68]	; (8000590 <sevensegment+0x2bc>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
        C_enable;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <sevensegment+0x2bc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <sevensegment+0x2bc>)
 8000556:	f043 0310 	orr.w	r3, r3, #16
 800055a:	6013      	str	r3, [r2, #0]
        D_enable;
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <sevensegment+0x2c0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <sevensegment+0x2c0>)
 8000562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000566:	6013      	str	r3, [r2, #0]
        F_enable;
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <sevensegment+0x2c4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <sevensegment+0x2c4>)
 800056e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000572:	6013      	str	r3, [r2, #0]
        G_enable;
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <sevensegment+0x2c4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <sevensegment+0x2c4>)
 800057a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057e:	6013      	str	r3, [r2, #0]
        break;
 8000580:	e000      	b.n	8000584 <sevensegment+0x2b0>
    default:
        break;
 8000582:	bf00      	nop
    }
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40020c14 	.word	0x40020c14
 8000594:	40020814 	.word	0x40020814
 8000598:	40020414 	.word	0x40020414

0800059c <zerotonine>:

void zerotonine(){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
    int i;
    for(i=0;i<10;i++){
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e009      	b.n	80005bc <zerotonine+0x20>
        sevensegment(i);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fe93 	bl	80002d4 <sevensegment>
        delay();
 80005ae:	f7ff fe0b 	bl	80001c8 <delay>
        reset();
 80005b2:	f7ff fe79 	bl	80002a8 <reset>
    for(i=0;i<10;i++){
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3301      	adds	r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b09      	cmp	r3, #9
 80005c0:	ddf2      	ble.n	80005a8 <zerotonine+0xc>
    }
}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <numara>:

int numara(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
    char stnumber[]= "20190701027";
 80005d2:	4a42      	ldr	r2, [pc, #264]	; (80006dc <numara+0x110>)
 80005d4:	463b      	mov	r3, r7
 80005d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i=0;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
    while(stnumber[i] != '\0'){
 80005e0:	e071      	b.n	80006c6 <numara+0xfa>
        switch(stnumber[i]){
 80005e2:	463a      	mov	r2, r7
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4413      	add	r3, r2
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	3b30      	subs	r3, #48	; 0x30
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d867      	bhi.n	80006c0 <numara+0xf4>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <numara+0x2c>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	08000621 	.word	0x08000621
 80005fc:	08000631 	.word	0x08000631
 8000600:	08000641 	.word	0x08000641
 8000604:	08000651 	.word	0x08000651
 8000608:	08000661 	.word	0x08000661
 800060c:	08000671 	.word	0x08000671
 8000610:	08000681 	.word	0x08000681
 8000614:	08000691 	.word	0x08000691
 8000618:	080006a1 	.word	0x080006a1
 800061c:	080006b1 	.word	0x080006b1
            case '0':
                sevensegment(0);
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fe57 	bl	80002d4 <sevensegment>
                delay2();
 8000626:	f7ff fdeb 	bl	8000200 <delay2>
                reset();
 800062a:	f7ff fe3d 	bl	80002a8 <reset>
                break;
 800062e:	e047      	b.n	80006c0 <numara+0xf4>
            case '1':
                sevensegment(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f7ff fe4f 	bl	80002d4 <sevensegment>
                delay2();
 8000636:	f7ff fde3 	bl	8000200 <delay2>
                reset();
 800063a:	f7ff fe35 	bl	80002a8 <reset>
                break;
 800063e:	e03f      	b.n	80006c0 <numara+0xf4>
            case '2':
                sevensegment(2);
 8000640:	2002      	movs	r0, #2
 8000642:	f7ff fe47 	bl	80002d4 <sevensegment>
                delay2();
 8000646:	f7ff fddb 	bl	8000200 <delay2>
                reset();
 800064a:	f7ff fe2d 	bl	80002a8 <reset>
                break;
 800064e:	e037      	b.n	80006c0 <numara+0xf4>
            case '3':
                sevensegment(3);
 8000650:	2003      	movs	r0, #3
 8000652:	f7ff fe3f 	bl	80002d4 <sevensegment>
                delay2();
 8000656:	f7ff fdd3 	bl	8000200 <delay2>
                reset();
 800065a:	f7ff fe25 	bl	80002a8 <reset>
                break;
 800065e:	e02f      	b.n	80006c0 <numara+0xf4>
            case '4':
                sevensegment(4);
 8000660:	2004      	movs	r0, #4
 8000662:	f7ff fe37 	bl	80002d4 <sevensegment>
                delay2();
 8000666:	f7ff fdcb 	bl	8000200 <delay2>
                reset();
 800066a:	f7ff fe1d 	bl	80002a8 <reset>
                break;
 800066e:	e027      	b.n	80006c0 <numara+0xf4>
            case '5':
                sevensegment(5);
 8000670:	2005      	movs	r0, #5
 8000672:	f7ff fe2f 	bl	80002d4 <sevensegment>
                delay2();
 8000676:	f7ff fdc3 	bl	8000200 <delay2>
                reset();
 800067a:	f7ff fe15 	bl	80002a8 <reset>
                break;
 800067e:	e01f      	b.n	80006c0 <numara+0xf4>
            case '6':
                sevensegment(6);
 8000680:	2006      	movs	r0, #6
 8000682:	f7ff fe27 	bl	80002d4 <sevensegment>
                delay2();
 8000686:	f7ff fdbb 	bl	8000200 <delay2>
                reset();
 800068a:	f7ff fe0d 	bl	80002a8 <reset>
                break;
 800068e:	e017      	b.n	80006c0 <numara+0xf4>
            case '7':
                sevensegment(7);
 8000690:	2007      	movs	r0, #7
 8000692:	f7ff fe1f 	bl	80002d4 <sevensegment>
                delay2();
 8000696:	f7ff fdb3 	bl	8000200 <delay2>
                reset();
 800069a:	f7ff fe05 	bl	80002a8 <reset>
                break;
 800069e:	e00f      	b.n	80006c0 <numara+0xf4>
            case '8':
                sevensegment(8);
 80006a0:	2008      	movs	r0, #8
 80006a2:	f7ff fe17 	bl	80002d4 <sevensegment>
                delay2();
 80006a6:	f7ff fdab 	bl	8000200 <delay2>
                reset();
 80006aa:	f7ff fdfd 	bl	80002a8 <reset>
                break;
 80006ae:	e007      	b.n	80006c0 <numara+0xf4>
            case '9':
                sevensegment(9);
 80006b0:	2009      	movs	r0, #9
 80006b2:	f7ff fe0f 	bl	80002d4 <sevensegment>
                delay2();
 80006b6:	f7ff fda3 	bl	8000200 <delay2>
                reset();
 80006ba:	f7ff fdf5 	bl	80002a8 <reset>
                break;
 80006be:	bf00      	nop
        }
        i++;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
    while(stnumber[i] != '\0'){
 80006c6:	463a      	mov	r2, r7
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d187      	bne.n	80005e2 <numara+0x16>
    }
}
 80006d2:	bf00      	nop
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	08000858 	.word	0x08000858

080006e0 <main>:

int main(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
    init();
 80006e4:	f7ff fda8 	bl	8000238 <init>
    while(1){
        zerotonine();
 80006e8:	f7ff ff58 	bl	800059c <zerotonine>
        while(gpioa_idr & 1<<0){
 80006ec:	e001      	b.n	80006f2 <main+0x12>
            numara();
 80006ee:	f7ff ff6d 	bl	80005cc <numara>
        while(gpioa_idr & 1<<0){
 80006f2:	4b03      	ldr	r3, [pc, #12]	; (8000700 <main+0x20>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1f7      	bne.n	80006ee <main+0xe>
        zerotonine();
 80006fe:	e7f3      	b.n	80006e8 <main+0x8>
 8000700:	40020010 	.word	0x40020010

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f83e 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <SystemInit+0x20>)
 800075e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <SystemInit+0x20>)
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800077c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000782:	490e      	ldr	r1, [pc, #56]	; (80007bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000784:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000798:	4c0b      	ldr	r4, [pc, #44]	; (80007c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007a6:	f7ff ffd7 	bl	8000758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007aa:	f000 f825 	bl	80007f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ae:	f7ff ff97 	bl	80006e0 <main>
  bx  lr    
 80007b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80007c0:	0800086c 	.word	0x0800086c
  ldr r2, =_sbss
 80007c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80007c8:	20000024 	.word	0x20000024

080007cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC_IRQHandler>
	...

080007d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_IncTick+0x20>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_IncTick+0x24>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_IncTick+0x24>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000020 	.word	0x20000020

080007f8 <__libc_init_array>:
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	4d0d      	ldr	r5, [pc, #52]	; (8000830 <__libc_init_array+0x38>)
 80007fc:	4c0d      	ldr	r4, [pc, #52]	; (8000834 <__libc_init_array+0x3c>)
 80007fe:	1b64      	subs	r4, r4, r5
 8000800:	10a4      	asrs	r4, r4, #2
 8000802:	2600      	movs	r6, #0
 8000804:	42a6      	cmp	r6, r4
 8000806:	d109      	bne.n	800081c <__libc_init_array+0x24>
 8000808:	4d0b      	ldr	r5, [pc, #44]	; (8000838 <__libc_init_array+0x40>)
 800080a:	4c0c      	ldr	r4, [pc, #48]	; (800083c <__libc_init_array+0x44>)
 800080c:	f000 f818 	bl	8000840 <_init>
 8000810:	1b64      	subs	r4, r4, r5
 8000812:	10a4      	asrs	r4, r4, #2
 8000814:	2600      	movs	r6, #0
 8000816:	42a6      	cmp	r6, r4
 8000818:	d105      	bne.n	8000826 <__libc_init_array+0x2e>
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000820:	4798      	blx	r3
 8000822:	3601      	adds	r6, #1
 8000824:	e7ee      	b.n	8000804 <__libc_init_array+0xc>
 8000826:	f855 3b04 	ldr.w	r3, [r5], #4
 800082a:	4798      	blx	r3
 800082c:	3601      	adds	r6, #1
 800082e:	e7f2      	b.n	8000816 <__libc_init_array+0x1e>
 8000830:	08000864 	.word	0x08000864
 8000834:	08000864 	.word	0x08000864
 8000838:	08000864 	.word	0x08000864
 800083c:	08000868 	.word	0x08000868

08000840 <_init>:
 8000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000842:	bf00      	nop
 8000844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000846:	bc08      	pop	{r3}
 8000848:	469e      	mov	lr, r3
 800084a:	4770      	bx	lr

0800084c <_fini>:
 800084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084e:	bf00      	nop
 8000850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000852:	bc08      	pop	{r3}
 8000854:	469e      	mov	lr, r3
 8000856:	4770      	bx	lr
